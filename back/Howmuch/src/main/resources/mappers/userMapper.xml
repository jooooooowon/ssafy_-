<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.ssafy.howmuch.model.dao.UserDao">

	<!-- 로그인 -->
	<select id="getUserById" resultType="User" parameterType="string">
		SELECT * FROM
		user WHERE userId = #{userId}
	</select>


	<!-- 아이디 중복체크 -->
	<select id="userIdChk" resultType="int" parameterType ="string">
		SELECT count(*)
		FROM user
		WHERE userId = #{userId}
	</select>

	<!-- 닉네임 중복체크 -->
	<select id="userNickNameChk" resultType="int" parameterType ="string">
		SELECT count(*)
		FROM user
		WHERE nickname = #{nickName}
	</select>
	
	<!-- 아이디로 유저 확인 -->
	<select id="getById" resultType="User" parameterType="string">
		SELECT *
		FROM user
		WHERE userId= #{userId}
	</select>

	<!-- 회원가입 -->
	<!-- 알아서 변경된 행의 수를 리턴 해줌 -->
	<insert id="signup" parameterType="User">
		INSERT INTO user(userId, password,
		email, nickname, birthday, weight, height) VALUES (#{userId}, #{password}, #{email}, #{nickname},
		#{birthday}, #{weight}, #{height})
	</insert>

	<!-- 회원탈퇴 -->
	<delete id="deleteUser" parameterType="String">
		DELETE FROM user WHERE
		userID = #{userId}
	</delete>
	
	
	<!-- 회원 수정 -->
	<update id="updateUser" parameterType="User">
		UPDATE user SET nickname = #{nickname}, weight = #{weight}, height = #{height} where userId = #{userId}
	</update>
	
	<!-- max값 수정 -->
	<update id="updateMaxRecord" parameterType="User">
		UPDATE user SET benchrecord = #{benchRecord}, squatrecord = #{squatRecord}, deadrecord = #{deadRecord} where userId = #{userId}
	</update>

	<!-- 랭킹 -->
	<select id="getRankBySquat" resultType="int"
		parameterType="String">
		<choose>
			<when test="key == 'total'">
				SELECT squatRank
				FROM
				(SELECT userId, RANK() OVER
				(ORDER
				BY squatrecord DESC) AS squatRank FROM user)
				AS SQUATRANK
				WHERE
				userId =
				#{userId};
			</when>
			<when test="key == 'age'">
				SELECT squatRank
				FROM
				(SELECT userId, RANK() OVER
				(ORDER
				BY squatrecord DESC) AS squatRank
				FROM user
				WHERE YEAR(birthday)
				= (
				SELECT YEAR(birthday)
				FROM user
				WHERE userId = #{userId}
				)
				) AS
				SQUATRANK
				WHERE userId = #{userId};
			</when>
			<when test="key == 'weight'">
				SELECT squatRank
				FROM
				(SELECT userId, RANK() OVER
				(ORDER BY squatrecord DESC) AS squatRank
				FROM user
				WHERE weight
				BETWEEN (SELECT weight - 2 FROM user WHERE userId =
				#{userId})
				AND
				(SELECT weight + 2 FROM user WHERE userId = #{userId})
				) AS DEADRANK
				WHERE userId = #{userId};
			</when>
		</choose>
	</select>

	<!-- 랭킹 -->
	<select id="getRankByBench" resultType="int"
		parameterType="String">
		<choose>
			<when test="key == 'total'">
				SELECT benchRank
				FROM
				(SELECT userId, RANK() OVER
				(ORDER
				BY benchrecord DESC) AS benchRank FROM user)
				AS BENCHRANK
				WHERE
				userId =
				#{userId};
			</when>
			<when test="key == 'age'">
				SELECT benchRank
				FROM
				(SELECT userId, RANK() OVER
				(ORDER
				BY benchrecord DESC) AS benchRank
				FROM user
				WHERE YEAR(birthday)
				= (
				SELECT YEAR(birthday)
				FROM user
				WHERE userId = #{userId}
				)
				) AS
				BENCHRANK
				WHERE userId = #{userId};
			</when>
			<when test="key == 'weight'">
				SELECT benchRank
				FROM
				(SELECT userId, RANK() OVER
				(ORDER BY benchrecord DESC) AS benchRank
				FROM user
				WHERE weight
				BETWEEN (SELECT weight - 2 FROM user WHERE userId =
				#{userId})
				AND
				(SELECT weight + 2 FROM user WHERE userId = #{userId})
				) AS BENCHRANK
				WHERE userId = #{userId};
			</when>
			<!-- Handle the case where key is not one of the specified values -->
		</choose>
	</select>

	<select id="getRankByDead" resultType="int"
		parameterType="String">
		<choose>
			<when test="key == 'total'">
				SELECT deadRank
				FROM
				(SELECT userId, RANK() OVER (ORDER
				BY deadrecord DESC) AS deadRank FROM user)
				AS DEADRANK
				WHERE userId =
				#{userId};
			</when>
			<when test="key == 'age'">
				SELECT deadRank
				FROM
				(SELECT userId, RANK() OVER (ORDER
				BY deadrecord DESC) AS deadRank
				FROM user
				WHERE YEAR(birthday) = (
				SELECT YEAR(birthday)
				FROM user
				WHERE userId = #{userId}
				)
				) AS DEADRANK
				WHERE userId = #{userId};
			</when>
			<when test="key == 'weight'">
				SELECT deadRank
				FROM
				(SELECT userId, RANK() OVER (ORDER
				BY deadrecord DESC) AS deadRank
				FROM user
				WHERE weight BETWEEN (SELECT
				weight - 2 FROM user WHERE userId =
				#{userId})
				AND (SELECT weight + 2
				FROM user WHERE userId = #{userId})
				) AS DEADRANK
				WHERE userId =
				#{userId};
			</when>
			<!-- Handle the case where key is not one of the specified values -->
		</choose>
	</select>

	<select id="getRankListBySquat" resultType="User"
		parameterType="String">
		<choose>
			<when test="key == 'total'">
				SELECT squatRank, userId, nickname, squatrecord
				FROM
				(SELECT userId, RANK() OVER (ORDER BY squatrecord DESC) AS
				squatRank,
				squatrecord, nickname FROM user) AS SQUATRANK;
			</when>

			<when test="key == 'age'">
				SELECT squatRank, userId, nickname, squatrecord
				FROM
				(SELECT RANK() OVER
				(ORDER BY squatrecord DESC) AS squatRank,
				userId,
				nickname,
				squatrecord
				FROM user
				WHERE YEAR(birthday) = (
				SELECT
				YEAR(birthday)
				FROM user
				WHERE userId = #{userId}
				)
				) AS SQUATRANK;

			</when>

			<when test="key == 'weight'">
				SELECT squatRank, userId, nickname, squatrecord
				FROM
				(SELECT userId, nickname, squatrecord, RANK() OVER (ORDER BY
				squatrecord DESC) AS
				squatRank
				FROM user
				WHERE weight BETWEEN (SELECT
				weight - 2 FROM user WHERE userId =
				#{userId})
				AND (SELECT weight + 2
				FROM user WHERE userId = #{userId})
				) AS SQUATRANK;
			</when>
		</choose>
	</select>

	<select id="getRankListByBench" resultType="User"
		parameterType="String">
		<choose>
			<when test="key == 'total'">
				SELECT benchRank, userId, nickname, benchrecord
				FROM
				(SELECT userId, RANK() OVER (ORDER BY benchrecord DESC) AS
				benchRank,
				benchrecord, nickname FROM user) AS BENCHRANK;
			</when>

			<when test="key == 'age'">
				SELECT benchRank, userId, nickname, benchrecord
				FROM
				(SELECT RANK() OVER
				(ORDER BY benchrecord DESC) AS benchRank,
				userId,
				nickname,
				benchrecord
				FROM user
				WHERE YEAR(birthday) = (
				SELECT
				YEAR(birthday)
				FROM user
				WHERE userId = #{userId}
				)
				) AS BENCHRANK;

			</when>

			<when test="key == 'weight'">
				SELECT benchRank, userId, nickname, benchrecord
				FROM
				(SELECT userId, nickname, benchrecord, RANK() OVER (ORDER BY
				benchrecord DESC) AS
				benchRank
				FROM user
				WHERE weight BETWEEN (SELECT
				weight - 2 FROM user WHERE userId =
				#{userId})
				AND (SELECT weight + 2
				FROM user WHERE userId = #{userId})
				) AS BENCHRANK;
			</when>
		</choose>
	</select>


	<select id="getRankListByDead" resultType="User"
		parameterType="String">
		<choose>
			<when test="key == 'total'">
				SELECT deadRank, userId, nickname, deadrecord
				FROM
				(SELECT userId, RANK() OVER (ORDER BY deadrecord DESC) AS
				deadRank,
				deadrecord, nickname FROM user) AS DEADRANK;
			</when>

			<when test="key == 'age'">
				SELECT deadRank, userId, nickname, deadrecord
				FROM
				(SELECT RANK() OVER
				(ORDER BY deadrecord DESC) AS deadRank,
				userId,
				nickname,
				deadrecord
				FROM user
				WHERE YEAR(birthday) = (
				SELECT
				YEAR(birthday)
				FROM user
				WHERE userId = #{userId}
				)
				) AS DEADRANK;

			</when>

			<when test="key == 'weight'">
				SELECT deadRank, userId, nickname, deadrecord
				FROM
				(SELECT userId, nickname, deadrecord, RANK() OVER (ORDER BY
				deadrecord DESC) AS
				deadRank
				FROM user
				WHERE weight BETWEEN (SELECT
				weight - 2 FROM user WHERE userId =
				#{userId})
				AND (SELECT weight + 2
				FROM user WHERE userId = #{userId})
				) AS DEADRANK;
			</when>
		</choose>
	</select>
</mapper>

